#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

BEGIN {
	PROGNAME    = "symstab2map";

	lib_init();

	infile      = "";
	outfile     = "";
	fatal       = 0;

	opts   = "i:o:fvdh";
	h_desc = "Transform a symbol table file into a map file";
	h_note = "";

	opt_desc["i"] = "set the input file";
	opt_desc["o"] = "set the output file";
	opt_desc["f"] = "warnings are fatal";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "o") {
			outfile = optarg;
		} else if (c == "i") {
			infile = optarg;
		} else if (c == "f") {
			fatal = 1;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "h") {
			help(0, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	if (infile == "") {
		hint("Missing input file");
		exit(1);
	}
	if (!readable(infile)) {
		error(infile " is not readable!\n");
		exit(1);
	}
	debug("infile = " infile "\n");

	if (outfile == "") {
		hint("Missing output file");
		exit(1);
	}
	if (!writable(outfile)) {
		error(outfile " is not writable!\n");
		exit(1);
	}
	debug("outfile = " outfile "\n");

	verbose("Start processing ...\n");

	retval = 0;
	printf("") > outfile;
	while ((getline line < infile) > 0) {
		if (match(line, /^.*:$/) != 0) {
			# Skip
		} else if (match(line, /^[ ]*$/) != 0) {
			# Skip
		} else if (match(line, /^.* .* .*$/) != 0) {
			delete data;

			n = split(line, data, " ");
			assert(n == 3);

			assert(data[1] != "");
			assert(data[2] != "");
			assert(data[3] != "");

			debug("Got " data[1] " " data[2] " " data[3] "\n");

			# Output only global symbols
			if (match(data[2], /^G.$/) != 0) {
				printf("%s %s\n", data[1], data[3]) > outfile;
			}
		} else {
			error("Unsupported or wrong input format "	\
			      "(line = `" line "`) ?\n");
			retval = -1;
			break;
		}
	}

	close(infile);
	close(outfile);

	exit(retval);
}

END {
	lib_fini();
}
