#
# guards_check
#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# This program is based on gitlog-to-changelog by Jim Meyering
#

use strict;
use warnings;
use Getopt::Long;
use POSIX qw(strftime);

(my $ME = $0) =~ s|.*/||;
my $VERSION = "0.1";

my @path;
my $do_report = 0;
my $fatal     = 0;
my $verbose   = 0;
my $debug     = 0;

END {
    defined fileno STDOUT or return;
    close STDOUT and return;
    warn "$ME: failed to close standard output: $!\n";
    $? ||= 1;
}

sub usage ($)
{
    my ($exit_code) = @_;
    my $STREAM = ($exit_code == 0 ? *STDOUT : *STDERR);
    if ($exit_code != 0) {
	print $STREAM "Try `$ME --help\' for more information.\n";
    } else {
	print $STREAM <<EOF;
Usage: $ME [OPTIONS]

    Check headers guard correctness

OPTIONS:

    -p, --path=PATH    specify a search path for input files
    -r, --report       print a summary report (guard based)
    -f, --fatal        all warnings become fatal
    -v, --verbose      enable verbose output
    -d, --debug        enable debugging
    -h, --help         display this help and exit
    -V, --version      output version information and exit

    Place input files at last, using -- as separator.

EOF
    }
    exit $exit_code;
}

{
    Getopt::Long::Configure("gnu_compat");
    GetOptions(
	'p|path=s'  => \@path,
	'r|report'  => sub { $do_report = 1; },
	'f|fatal'   => sub { $fatal = 1 },
	'v|verbose' => sub { $verbose = 1 },
	'd|debug'   => sub { $debug = 1 },
	'h|help'    => sub { usage 0 },
	'V|version' => sub { print "$ME version $VERSION\n"; exit },
	) or usage 1;

    @ARGV
	or (warn "$ME: missing input files\n"), usage 1;
}
