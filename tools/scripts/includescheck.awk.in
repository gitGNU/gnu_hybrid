#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function check_file(name, dump)
{
	delete count;
	delete includes;
	verbose("Checking file " name "\n");

	includes_cnt = 0;
	while ((getline line < name) > 0) {
		line = strcleanspc(line);

		if (match(line, /^#[ ]*include [<\"].*[>\"]$/) != 0) {

			sub("^#[ ]*include [<\"][ \t]*", "", line);
			sub("[ \t]*[>\"]$", "", line);

			includes[includes_cnt] = line;

			debug("Got include "		\
			      includes[includes_cnt]	\
			      " (assigned to index "	\
			      includes_cnt		\
			      ")\n");

			includes_cnt++;
		}
	}
	close(name);

	for (i = 0; i < includes_cnt; i++) {
		count[includes[i]] = 0;
	}
	for (i = 0; i < includes_cnt; i++) {
		count[includes[i]]++;
	}

	if (dump) {
		printf("  %s [ ", name);

		for (file in count) {
			printf(file " ");
		}

		printf("]\n");
	}

	wrong = 0;
	for (file in count) {
		if (count[file] > 1) {
			warning(name  " includes " file " more than once\n");
			wrong = 1;
		}
	}

	# debug("wrong = " wrong "\n");

	return (wrong ? 0 : 1);
}

BEGIN {
	PROGNAME   = "includescheck";

	lib_init();

	dump       = 0;

	delete paths;
	paths["./"] = 1;
	paths["/"]  = 1;
	
	opts   = "Dp:vdh";
	h_desc = "Check for duplicated includes"; 
	h_note = "Place input files at last, using -- as separator";

	opt_desc["D"] = "dump gathered includes";
	opt_desc["p"] = "specify a search path for input files";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";	
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "D") {
			dump = 1;
		} else if (c == "p") {
			paths[optarg] = 1;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "h") {
			help(1, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	debug("PASS 1: Checking input files existance\n");

        for (i = 0; optind < ARGC; optind++) {

			infile = ARGV[optind];
			wrong  = 1;

			for (p in paths) {
				debug("Checking path " p "\n");
				if (readable(p "/" infile)) {
					infiles[i + 1] = p "/" infile;
					wrong = 0;
					break;
				}
			}

			if (wrong) {
				error("File "			\
				      ARGV[optind]		\
				      " is not readable\n");
				exit(1);
			}

			debug("Checked " infile " (index " i ")\n");
			i++;
	}
	infiles_cnt = i;

	debug(infiles_cnt " files to check\n");

	if (infiles_cnt <= 0) {
		hint("Missing input file(s)");
		exit(1);
	}

	debug("PASS 2: Checking input files data\n");

	for (file in infiles) {
		if (!check_file(infiles[file], dump)) {
			exit(1);
		}
	}

	exit(0);
}

END {
	lib_fini();
}
