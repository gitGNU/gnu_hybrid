#
# sh2h_new
#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#
# System tools
#
SED="@SED@"
AWK="@AWK@"

#
# Script variables
#
PROGNAME="sh2h"
PROGVERSION="0.0.1"
INFILE=""
OUTFILE=""
PREFIX=""
GUARD=""

#
# Internal functions
#
help () {
    echo "Usage: $PROGNAME [OPTION]"
    echo
    echo "Transform a symbol file into a C header file"
    echo
    echo "  -p <ARG>    set the prefix"
    echo "  -g <ARG>    set the guard"
    echo "  -i <ARG>    set the input file"
    echo "  -o <ARG>    set the output file"
    echo "  -v          enable verbose messages"
    echo "  -d          enable debugging"
    echo "  -h          display this help and exit"
    echo "  -V          display program version"
    echo
    echo "Report bugs to <@PACKAGE_BUGREPORT@>."
}

#
# Libraries initialization
#
lib_init

#
# Parsing command line arguments
#
if test x"$*" = x"" ; then
    hint "Missing required options"
    exit 1
fi

while test ! x"$1" = x""
do
    case $1 in
	-p)
	    shift && PREFIX=$1
	    ;;
	-g)
	    shift && GUARD=$1
	    ;;
	-i)
	    shift && INFILE=$1
	    ;;
	-o)
	    shift && OUTFILE=$1
	    ;;
	-d)
	    DEBUG=1
	    ;;
	-h)
	    help && exit 0
	    ;;
	-V)
	    version && exit 0
	    ;;
	*)
	    hint "Wrong option \`$1'"
	    exit 1
	    ;;
    esac
    shift
done

#
# Checking command line arguments
#
if test x"$GUARD" = x"" ; then
    hint "Missing guard"
    exit 1
fi

if test x"$PREFIX" = x"" ; then
    hint "Missing guard"
    exit 1
fi

if test x"$INFILE" = x"" ; then
    hint "Missing input file"
    exit 1
fi

if test ! -r $INFILE; then
    error "File \`$INFILE' is not readable"
    exit 1
fi

if test x"$OUTFILE" = x"" ; then
    hint "Missing output file"
    exit 1
fi

: 2>/dev/null 1>$OUTFILE || \
    { error "File \`$OUTFILE' is not writable" ; exit 1 ; }

#
# Start the real job
#
verbose "Start processing..."

$AWK -v guard=$GUARD -v prefix=$PREFIX  \
    'BEGIN {
	delete defs;
	retval = 0;
    }

    /.*/ {
	sub(/^[\ \t]*/, "", $0);
	sub(/[\ \t]*$/, "", $0);
    }

    /^\#.*$/ {
	line = $0;

	if (line ~ /^.*\ is\ not\ set$/) {
	    sub(/^\#[\ \t]*/, "", line);
	    sub(/[\ \t]*is\ not\ set$/, "", line);
	    defs[line] = "0 /* Deduced */";
	}
	next;
    }

    /^.*y/ {
	count = split($0, temp, " ");

	if (count != 2) {
	    print "'$PROGNAME': " \
		  "Wrong input format while looking for option name";
	    retval = 1;
	    exit 1;
	}
	defs[temp[1]] = 1;
	next;
      }

    /^.*n/ {
	count = split($0, temp, " ");

	if (count != 2) {
	    print "'$PROGNAME': " \
		  "Wrong input format while looking for option name";
	    retval = 1;
	    exit 1;
	}
	defs[temp[1]] = 0;
	next;
    }

    /^.*m/ {
	print "'$PROGNAME': Tristates are not allowed";
	retval = 1;
	exit 1;
    }

    /^.*[\ \t][0-9][0-9]*$/ {
	count = split($0, temp, " ");

	if (count != 2) {
	    print "'$PROGNAME': " \
		  "Wrong input format while looking for option name";
	    retval = 1;
	    exit 1;
	}
	defs[temp[1]] = temp[2];
	next;
    }

    /^.*[\ \t]0[xX][0-9A-Fa-f][0-9A-Fa-f]*$/ {
	count = split($0, temp, " ");

	if (count != 2) {
	    print "'$PROGNAME': " \
		  "Wrong input format while looking for option name";
	    retval = 1;
	    exit 1;
	}
	defs[temp[1]] = temp[2];
	next;
    }

    /^[\ \t]*$/ {
	# Empty line, skip.
	next;
    }

    /.*/ {
	print "'$PROGNAME': Unrecognized input line `" $0 "`";
	retval = 1;
	exit 1;
    }
    END {
	if (retval != 0) {
	    exit retval;
	}

	maxlength = 0;

	for (sym in defs) {
	    l = length(sym)

	    if (maxlength < l) {
		maxlength = l;
	    }
	}
	defscount = 0

	print "/*";
	print " * This file has been generated by '$PROGNAME'. DO NOT EDIT";
	print " */";
	print "";
	print "#ifndef " toupper(guard);
	print "#define " toupper(guard);
	print "";

	for (sym in defs) {
	    printf("#define %s%-" maxlength "s %s\n", prefix, sym, defs[sym]);
	    defscount++;
	}

	print "";
	print "#endif /* " toupper(guard) " */";
	print "";
	print "/* " defscount " definitions processed */";
    }
    ' <$INFILE >$OUTFILE

if test $? != 0; then
    cat $OUTFILE
    rm -f $OUTFILE 2>/dev/null
    exit $?
fi

#
# Libraries finalization
#
lib_fini

#
# All done!
#
exit 0
