#
# bootcheck
#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

BEGIN {
	PROGNAME = "bootcheck";

	lib_init();

	arch  = "";
	infn  = "";
	fatal = 0;

	opts   = "a:i:fvdh";
	h_desc = "Check a kernel image for multiboot compliance";
	h_note = "";

	opt_desc["a"] = "set the architecture";
	opt_desc["i"] = "set the input file";
	opt_desc["f"] = "warnings are fatal";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "a") {
			arch = optarg;
		} else if (c == "i") {
			infn = optarg;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "f") {
			fatal = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "h") {
			help(0, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	if (arch == "") {
		hint("Missing architecture");
		exit(1);
	}
	debug("arch   = " arch "\n");
	if (infn == "") {
		hint("Missing input file name");
		exit(1);
	}
	if (!readable(infn)) {
		error(infn " is not readable!\n");
		exit(1);
	}
	debug("infile = " infn "\n");

	retval = 1;
	if (arch == "x86") {
		if ("@GRUB1_MBCHK@" != "") {
			assert(executable(remove_parameters("@GRUB1_MBCHK@")));

			command = "@GRUB1_MBCHK@ " infn;
			retval  = system(command);
		} else {
			error("Cannot find needed mbchk program ...\n");
		}
	} else {
		error("Unknown architecture " arch "\n");
	}

	exit(retval);
}

END {
	lib_fini();
}
