#
# rules2syms
#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#                          Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Required variables
PROGNAME="rules2syms"
PROGVERSION="0.0.1"

# System tools
SED="@SED@"

# Script variables
INFILES=""
OUTFILE=""

#
# Internal functions
#
help () {
    echo "Usage: $PROGNAME [OPTION] -- <FILES>"
    echo
    echo "Extracs symbols from rule files."
    echo
    echo "  -o    set the output file"
    echo "  -v    enable verbose messages"
    echo "  -d    enable debugging"
    echo "  -h    display this help and exit"
    echo "  -V    display program version"
    echo
    echo "Place input files at last, using -- as separator."
    echo
    echo "Report bugs to <@PACKAGE_BUGREPORT@>."
}

#
# Libraries initialization
#
lib_init

#
# Parsing command line arguments
#
if test x"$*" = x"" ; then
    hint "Missing required options"
    exit 1
fi

while test ! x"$1" = x""
do
    case $1 in
	-o)
	    shift && OUTFILE=$1
	    ;;
	-v)
	    VERBOSE=1
	    ;;
	-d)
	    DEBUG=1
	    ;;
	-h)
	    help && exit 0
	    ;;
	-V)
	    version && exit 0
	    ;;
	--)
	    shift
	    while test ! x"$1" = x""
	    do
		FILENAME="$1"

		if test ! -r $FILENAME ; then
		    error "File \`$FILENAME is not readable"
		    exit 1
		fi

		debug "Adding file \`$FILENAME'"

		if test x"$INFILES" = x"" ; then
		    INFILES=$FILENAME
		else
		    INFILES="$INFILES:$1"
		fi
		shift
	    done
	    break
	    ;;
	*)
	    hint "Wrong option \`$1'"
	    exit 1
	    ;;
    esac
    shift
done

#
# Checking command line arguments
#
if test x"$OUTFILE" = x"" ; then
    hint "Missing output file"
fi

if test x"$INFILES" = x"" ; then
    hint "Missing input file(s)"
    exit 1
fi

#
# Start the real job
#
verbose "Start scanning..."

OLDIFS=$IFS
IFS=":"

: 2>/dev/null 1>$OUTFILE || { error "Cannot write to \`$OUTFILE'" ; exit 1 ; }

for INFILE in $INFILES
do
    debug "Scanning file \`$INFILE'"
    $SED -n							\
	-e 's/^[ \t]*config[ \t]*\(.*\)[ \t]*$/\1/p'		\
	< $INFILE >> $OUTFILE					\
	|| { error "Failed to scan file \`$INFILE'" ; exit 1 ; }
done

verbose "Scan completed without errors"
debug "Output file is: \`$OUTFILE'"

#
# Libraries finalization
#
lib_fini

#
# All done!
#
exit 0
