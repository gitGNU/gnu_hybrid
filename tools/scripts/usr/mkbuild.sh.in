#
# mkbuild
#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Required variables
PROGNAME="mkbuild"
PROGVERSION="0.0.1"

# System tools
SED="@SED@"
DATE="@DATE@"

# Script variables
IO_FILE=""
GUARD=""

#
# Internal functions
#
help () {
    echo "Usage: $PROGNAME [OPTIONS]"
    echo
    echo "Generate build header while incrementing build number"
    echo
    echo "  -g <ARG>    set the guard"
    echo "  -F <ARG>    set the input/output file"
    echo "  -v          enable verbose messages"
    echo "  -d          enable debugging"
    echo "  -h          display this help and exit"
    echo "  -V          display program version"
    echo
    echo "Report bugs to <@PACKAGE_BUGREPORT@>."
}

#
# Libraries initialization
#
lib_init

#
# Parsing command line arguments
#
if test x"$*" = x"" ; then
    hint "Missing required options"
    exit 1
fi

while test ! x"$1" = x""
do
    case $1 in
	-g)
	    shift && GUARD=$1
	    ;;
	-F)
	    shift && IO_FILE=$1
	    ;;
	-d)
	    DEBUG=1
	    ;;
	-h)
	    help && exit 0
	    ;;
	-V)
	    version && exit 0
	    ;;
	*)
	    hint "Wrong option \`$1'"
	    exit 1
	    ;;
    esac
    shift
done

#
# Checking command line arguments
#
if test x"$GUARD" = x"" ; then
    hint "Missing guard"
    exit 1
fi

if test x"$IO_FILE" = x"" ; then
    hint "Missing input/output file"
    exit 1
fi

debug "guard       = ${GUARD}"
debug "input file  = ${IO_FILE}"
debug "output file = ${IO_FILE}"

#
# Start the real job
#
BUILDNO=""

verbose "PASS 1: Reading input file..."

if test -r $IO_FILE; then
    BUILDNO="`$SED -n -e '/^[ \t]*\#[ \t]*define[ \t][ \t]*BUILD_NUMBER/ {
			    s/^.*[ \t]\([0-9][0-9]*\)[ \t]*$/\1/p;
			    Q;
		       }' 2>/dev/null <$IO_FILE`"

    if test x"$BUILDNO" = x""; then
	error "Cannot parse old input file..."
	exit 1
    fi
else
    verbose "Starting from scratch..."
fi

verbose "PASS 2: Writing output file..."

if test ! $BUILDNO -ge 0; then
    error "Wrong build number `${BUILDNO}`"
    exit 1
fi

BUILDNO=`expr $BUILDNO + 1`

: 2>/dev/null 1>$IO_FILE || \
    { error "File `${IO_FILE}` is not writable" ; exit 1 ; }

cat >$IO_FILE <<EOF
/*
 * This file has been generated by $PROGNAME. DO NOT EDIT"
 */

#ifndef $GUARD
#define $GUARD

#define BUILD_NUMBER $BUILDNO
#define BUILD_DATE   "`$DATE`"

#endif /* $GUARD */

EOF

#
# Libraries finalization
#
lib_fini

#
# All done!
#
exit 0
