#
# clhandler
#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function print_list(list, separator)
{
	is_first = 1;

	assert(separator != "");

	debug("Using separator `" separator "`\n");

	for (x in list) {

		if (is_first == 0) {
			printf separator;
		}
		printf x;
		is_first = 0;
	}
	printf "\n";

	return 1;
}

function check_extension(filename)
{
	assert(filename != "");

	debug("Checking file " filename "\n");

	for (x in ext_lst) {

		if (match(filename, ".*."x"$") != 0) {
			verbose("File `" filename "` matches " \
				"extension `"x"`\n");
			return 1;
		}
	}
	return 0;
}

BEGIN {
	PROGNAME = "clhandler";

	lib_init();

	delete paths;
	paths["./"]  = 1;
	paths["/"]   = 1;
	fatal        = 0;

	opts   = "p:i:e:s:fvdh";
	h_desc = "Handles extensions from a files list";
	h_note = "Place input files list at last, using -- as separator";

	opt_desc["p"] = "specify a search path for input files";
	opt_desc["i"] = "Includes file extension";
	opt_desc["e"] = "Excludes file extension";
	opt_desc["s"] = "Specify a separator string [default is \" \"]";
	opt_desc["f"] = "all warnings become fatal";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["h"] = "display this help and exit";

	include_flag = 0;
	exclude_flag = 0;
	ext_match    = 0;
	sep_lst      = " ";

	delete ext_lst;
	delete out_lst;

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "p") {
			paths[optarg] = 1;
		} else if (c == "i") {
			include_flag    = 1;
			ext_lst[optarg] = 1;
		} else if (c == "e") {
			exclude_flag    = 1;
			ext_lst[optarg] = 1;
		} else if (c == "s") {
			sep_lst = optarg;
		} else if (c == "f") {
			fatal = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "h") {
			help(1, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	debug("PASS 1: Checking parameters\n");

	if (include_flag && exclude_flag) {
		hint("Include and exclude switches cannot coexist!\n");
		exit(1);
	}

	if (!include_flag && !exclude_flag) {
		hint("No include or exclude switches specified\n");
		exit(1);
	}

	debug("PASS 2: Processing files list\n");

	for (i = 0; optind < ARGC; optind++) {
		infile = ARGV[optind];

		if ((include_flag == 1) &&
		    (check_extension(infile) == 1)) {
			out_lst[infile] = 1;
			ext_match       = 1;
			continue;
		}

		if ((exclude_flag == 1) &&
		    (check_extension(infile) == 0)) {
			out_lst[infile] = 1;
			ext_match       = 1;
			continue;
		}
	}

	debug("PASS 3: Printing processed list\n");

	if (ext_match == 1) {
		print_list(out_lst, sep_lst);
	}

	verbose("All done\n");
	exit(0);
}

END {
	lib_fini();
}
