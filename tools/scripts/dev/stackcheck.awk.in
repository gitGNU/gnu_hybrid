#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function add_size(name, size)
{
	debug("Adding size `" size "` to name `" name "`\n");

	assert(length(name) > 0);
	assert(size > 0);

	symbol[name] = max(symbol[name], size);
}

function add_name(name)
{
	debug("Adding name `" name "`\n");

	assert(length(name) > 0);

	symbol[name] = 0;
}

function x86(string)
{
	debug("Input string is `" string "`\n");

	string = strcleanspc(string);

	debug("Clean string is `" string "`\n");

	if (match(string, /^[0-9a-fA-F]* <.*>:$/) != 0) {
		sub(/^.*</, "", string);
		sub(/>:$/,  "", string);

		name = string;

		debug("Got name `" name "`\n");

		add_name(name);
	} else if (match(string, /^[0-9a-fA-F][0-9a-fA-F]*:.*sub \$.*,%esp$/) \
		   != 0) {
		sub(/^.*sub \$/, "", string);
		sub(/,%esp$/,    "", string);

		size = hex2int(string);

		debug("Got size `" size "` for name `" name "`\n");

		add_size(name, size);
	} else {
	}
}

function check(infile, architecture, maxstack)
{
	verbose("Checking stack for " infile ":\n");

	pipe = "@OBJDUMP@ -d " infile " | @CXXFILT@";
	while ((pipe | getline string) > 0) {
		if (architecture == "x86") {
			x86(string);
		} else {
			error("Unknown architecture <" architecture "> ...\n");
			exit(1);
		}
	}
	close(pipe);

	for (i in symbol) {
		entries++;
		if (symbol[i] > maxstack) {
			out_entries++;
			exceeding[i] = symbol[i];
		}
	}

	verbose("Entries increasing stack size: " entries "\n");

	retval = 1;
	if (out_entries > 0) {
		maxlength = 0;
		for (i in exceeding) {
			maxlength = max(maxlength, length(i));
		}

		printf("Stack growth exceeding %d bytes:\n", maxstack);

		for (i in exceeding) {
			printf("  %" maxlength "s | %d\n", i, exceeding[i]);
		}

		error("File " infile " reports " out_entries            \
		      " entries exceeding allowed stack size\n");


		retval = 0;
	};

	return retval;
}

BEGIN {
	PROGNAME    = "stackcheck";

	lib_init();

	entries     = 0;
	out_entries = 0;

	arch        = "";
	maxstack    = -1;
	infn        = "/dev/stdin";

	opts   = "a:s:vdh";
	h_desc = "Check binary images stack";
	h_note = "Place input files at last, using -- as separator";

	opt_desc["a"] = "set the architecture";
	opt_desc["s"] = "set the maximum allowed stack size";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "a") {
			arch = optarg;
		} else if (c == "s") {
			maxstack = optarg;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "h") {
			help(0, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	if (arch == "") {
		hint("Missing architecture");
		exit(1);
	}
	if (maxstack < 0) {
		hint("Missing or invalid maximum stack growth");
		exit(1);
	}

	debug("arch      = " arch "\n");
	debug("max stack = " maxstack "\n");

	assert("@OBJDUMP@" != "");
	assert(executable(remove_parameters("@OBJDUMP@")));

	assert("@CXXFILT@" != "");
	assert(executable(remove_parameters("@CXXFILT@")));

	wrong = 0;
	for (i = 1; optind < ARGC; optind++) {

			infile = ARGV[optind];

			if (!readable(infn)) {
				error(infile " is not readable!\n");
				exit(1);
			}

			if (!check(infile, arch, maxstack)) {
				error("File "				 \
				      infile				 \
				      " exceeds maximum allowed stack");
				wrong = 1;
			}
	}

	if (wrong) {
		exit(1);
	} else {
		exit(0);
	}
}

END {
	lib_fini();
}
