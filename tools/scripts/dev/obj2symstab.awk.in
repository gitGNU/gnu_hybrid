#
# obj2symstab
#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function transform_data(count, infile, names, types, values)
{
	verbose("Transforming data for file `" infile "`\n");

	j = 0;
	for (i = 0; i < count; i++) {
		name  = names[i];
		type  = types[i];
		value = values[i];

		assert(name != "");
		assert(type != "");
		assert(value >= 0);

		# Apply transformations ...
		if (type == toupper(type)) {
			# Upper case type -> global symbol
			type = "G" type;
			j++;
		} else if (type == tolower(type)) {
			# Lower case type -> local symbol
			type = "L" type;
			j++;
		} else {
			not_reachable();
		}
		type  = toupper(type);

		debug("\t"						\
		      "("  names[i] ", " types[i] ", " values[i] ") "	\
		      "-> "						\
		      "("  name     ", " type     ", " value     ")"	\
		      "\n");

		names[i]  = name;
		types[i]  = type;
		values[i] = value;

	}

	verbose("Transformed " j "/" k " items\n");

	return 1;
}

function fix_data(count, infile, names, types, values)
{
	verbose("Fixing data for file `" infile "`\n");

	for (k = 0; k < count; k++) {
		type  = types[k];
		name  = names[k];
		value = values[k];

		if (match(type, /^[ABCDGINRSTUVW-]$/) != 0) {
			debug("Got global symbol "	\
			      "`" name "` "		\
			      "(type = "		\
			      "`" type "`"		\
			      " / "			\
			      "value = "		\
			      "`" value "`"		\
			      ")\n");

			# Fix name, value and type as needed ...
			if (type == "U") {
				# Value must be undefined here
				assert(value == "");

				debug("Fixing undefined symbol " \
				      "`" name "`"		 \
				      "\n");

				value = 0;
			}

			assert(value != "");

		} else if (match(type, /^[abcdginrstuvw-]$/) != 0) {
			debug("Got local symbol "	\
			      "`" name "` "		\
			      "(type = "		\
			      "`" type "`"		\
			      " / "			\
			      "value = "		\
			      "`" value "`"		\
			      ")\n");

			# Fix name, value and type as needed ...
			if (type == "u") {
				# Value must be undefined here
				assert(value == "");

				debug("Fixing undefined symbol " \
				      "`" name "`"		 \
				      "\n");

				value = 0;
			}

			assert(value != "");

		} else if (match(type, /^[?]$/) != 0) {
			# Symbol type is unknown or format specific
			error("Symbol `" name "` has unknown type\n");
			return 0;
		} else {
			error("Unsupported symbol type `" type "`\n");
			return 0;
		}

		# Then assign all needed things
		names[k]  = name;
		values[k] = 0 + value;
		types[k]  = type;
	}

	verbose("Fixed " k " items\n");

	return 1;
}

function scan_file(pipe, infile, names, types, values)
{
	assert(pipe != "");
	assert(infile != "");

	archive_seen = 0;
	k            = 0;
	stream       = pipe infile " 2>/dev/null";

	verbose("Scanning file `" infile "`\n");

	while ((stream | getline string) > 0) {
		delete data;

		string = strcleanspc(string);

		if (match(string, /^[0-9a-fA-F]*[ ]*. [ ]*.*$/) != 0) {
			debug("input line is: " string "\n");

			# Gather data
			n = split(string, data, " ");
			if (n == 3) {
				value = data[1];
				type  = data[2];
				name  = data[3];
			} else if (n == 2) {
				value = "";
				type  = data[1];
				name  = data[2];
			} else {
				assert(1);
			}

			# Check gathered data
			assert(name  != "");       # name must be != ""
			assert(type  != "");       # type must be != ""
			assert(length(type) == 1); # type must be 1 char
						   # value could be whatever

			values[k] = value;
			names[k]  = name;
			types[k]  = type;

			k++;

		} else if (match(string, /^.*:[ ]*no[ ]* symbols$/) != 0) {
			debug("No symbols found ...\n");
			break;
		} else if (match(string, /^[ ]*$/) != 0) {
			# Skip empty lines ...
		} else if (match(string, /^.*:[ ]*$/) != 0) {
			if (!archive_seen) {
				verbose("Input file "		\
					"`" infile "`"		\
					" is an archive\n");
				archive_seen = 1;
			}
		} else {
			error("Unsupported or wrong input format "	\
			      "(line = `" string "`) ?\n");
			close(stream);
			return -1;
		}
	}

	close(stream);

	verbose("Scanned " k " items\n");

	return k;
}

BEGIN {
	PROGNAME            = "obj2symstab";

	lib_init();

	outfile             = "";
	sort_numerically    = 0;
	sort_alphabetically = 0;
	sort_size           = 0;
	sort_none           = 0;
	mangle              = 0;
	demangle            = 0;
	radix               = 0;
	fatal               = 0;

	opts   = "o:DOXmfMnasuvdh";
	h_desc = "Dump symbols of elf image files";
	h_note = "Place input files at last, using -- as separator";

	opt_desc["o"] = "set the output file";
	opt_desc["n"] = "sort symbols numerically";
	opt_desc["a"] = "sort symbols alphabetically";
	opt_desc["s"] = "sort symbols by their size";
	opt_desc["u"] = "do not sort symbols in any order";
	opt_desc["m"] = "mangle symbols";
	opt_desc["M"] = "demangle symbols";
	opt_desc["D"] = "use decimal radix";
	opt_desc["O"] = "use octal radix";
	opt_desc["X"] = "use hexadecimal radix";
	opt_desc["f"] = "warnings are fatal";
	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["h"] = "display this help and exit";

	infiles_cnt = 0;

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "o") {
			outfile = optarg;
		} else if (c == "n") {
			sort_numerically = 1;
		} else if (c == "a") {
			sort_alphabetically = 1;
		} else if (c == "s") {
			sort_size = 1;
		} else if (c == "u") {
			sort_none = 1;
		} else if (c == "m") {
			mangle = 1;
		} else if (c == "M") {
			demangle = 1;
		} else if (c == "O") {
			radix = 8;
		} else if (c == "D") {
			radix = 10;
		} else if (c == "X") {
			radix = 16;
		} else if (c == "f") {
			fatal = 1;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "h") {
			help(0, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	for (i = 0; optind < ARGC; optind++) {
		if (!readable(ARGV[optind])) {
			error("File `" ARGV[optind] "` is not readable\n");
			exit(1);
		}
		infiles[i] = ARGV[optind];
		i++;
	}
	infiles_cnt = i;

	if (infiles_cnt == 0) {
		hint("Missing input file(s)");
		exit(1);
	}
	debug("Got " infiles_cnt " file to process\n");

	if (outfile == "") {
		hint("Missing output file");
		exit(1);
	}
	if (!writable(outfile)) {
		error(outfile " is not writable!\n");
		exit(1);
	}
	debug("outfile = " outfile "\n");

	assert((sort_alphabetically == 0) || (sort_alphabetically == 1));
	assert((sort_numerically == 0)    || (sort_numerically == 1));
	assert((sort_size == 0)           || (sort_size == 1));
	assert((sort_none == 0)           || (sort_none == 1));

	if ((sort_alphabetically +		\
	     sort_numerically    +		\
	     sort_size           +		\
	     sort_none) == 0) {
		hint("No sorting order specified");
		exit(1);
	}
	if ((sort_alphabetically +		\
	     sort_numerically    +		\
	     sort_size           +		\
	     sort_none) > 1) {
		hint("Too many sorting order specified");
		exit(1);
	}

	if ((!mangle) && (!demangle)) {
		hint("No mangling or demangling option specified");
		exit(1);
	}
	if ((mangle) && (demangle)) {
		hint("Mangling and demangling option specified");
		exit(1);
	}

	if ((radix != 8) && (radix != 10) && (radix != 16)) {
		hint("Wrong radix or no radix specified");
		exit(1);
	}

	assert("@NM@" != "");
	assert(executable(remove_parameters("@NM@")));

	#
	# $NM produces the following output:
	#   <value> <type> <name>
	#
	# The type of the symbol is:
	#   A = Absolute
	#   B = Uninitialised data (.bss)
	#   C = Common symbol
	#   D = Initialised data
	#   G = Initialised data for small objects
	#   I = Indirect reference to another symbol
	#   N = Debugging symbol
	#   R = Read only
	#   S = Uninitialised data for small objects
	#   T = Text code symbol
	#   U = Undefined symbol
	#   V = Weak symbol
	#   W = Weak symbol
	#   - = Stab symbol
	#   ? = Unknown symbol
	#
	# Corresponding small letters are local symbols
	#
	pipe  = "@NM@ ";
	if (mangle) {
		pipe = pipe "--no-demangle ";
	} else if (demangle) {
		pipe = pipe "--demangle ";
	} else {
		not_reachable();
	}

	# Require decimal input from pipe!
	pipe = pipe "--radix=d ";

	if (sort_numerically) {
		pipe = pipe "--numeric-sort ";
	} else if (sort_alphabetically) {
		pipe = pipe " ";
	} else if (sort_size) {
		pipe = pipe "--size-sort ";
	} else if (sort_none) {
		pipe = pipe "--no-sort ";
	} else {
		not_reachable();
	}

	# Build format string
	format = "";
	if (radix == 8) {
		digits = 16;
		format = "%0" digits "o";
	} else if (radix == 10) {
		digits = 10;
		format = "%0" digits "d";
	} else if (radix == 16) {
		digits = 8;
		format = "%0" digits "x";
	} else {
		not_reachable();
	}
	assert(format != "");

	# The real work at last ;-)
	printf("") > outfile;
	for (i = 0; i < infiles_cnt; i++) {
		delete names;
		delete values;
		delete types;

		infile = infiles[i];

		# Get data
		count = scan_file(pipe, infile, names, types, values);
		if (count < 0) {
			error("Problems scanning input file " \
			      "`" infile "`\n");
			exit(1);
		}

		assert(count >= 0);

		# Rearrange it
		if (count > 0) {
			if (!fix_data(count, infile,
				      names, types, values)) {
				error("Cannot fix data for input file `" \
				      infile				 \
				      "`\n");
				exit(1);
			}

			if (!transform_data(count, infile,
					    names, types, values)) {
				error("Cannot transform data "		\
				      "for input file `" infile "`\n");
				exit(1);
			}
		}

		# Then output to file
		printf("%s:\n", infile) > outfile;

		if (count == 0) {
			warning("Input file `" infile "` has no symbols\n");
			if (fatal) {
				exit(1);
			}
		} else if (count > 0) {
			for (j = 0; j < count; j++) {
				printf(format " %s %s\n",
				       values[j],
				       types[j],
				       names[j]) > outfile;
			}
		} else {
			not_reachable();
		}

		# Separate data from different input files
		if ((infiles_cnt > 1) && (i < infiles_cnt)) {
			printf("\n") > outfile;
		}
	}

	close(outfile);

	exit(0);
}

END {
	lib_fini();
}
