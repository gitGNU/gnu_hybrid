#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

BEGIN {
	PROGNAME = "rules2syms";

	lib_init();

	outfile  = "/dev/stdout";

	opts   = "o:vdh";
	h_desc = "Extracs symbols from rule files";
	h_note = "Place input files at last, using -- as separator";

	opt_desc["v"] = "enable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["o"] = "set the output file";
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "o") {
			outfile = optarg;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "h") {
			help(1, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	verbose("Checking input files ...\n");
	for (i = 0; optind < ARGC; optind++) {
		if (!readable(ARGV[optind])) {
			error(ARGV[optind] " is not readable!\n");
			exit(1);
		}

		infiles[i] = ARGV[optind];

		i++;
	}
	infiles_cnt = i;

	if (infiles_cnt <= 0) {
		hint("Missing input file(s)");
		exit(1);
	}

	verbose("Checking output file ...\n");
	if (exist(outfile)) {
		warning("Outfile " outfile " is present\n");
	}
	if (!writable(outfile)) {
		error("Cannot write on file " outfile "\n");
		exit(1);
	}

	verbose("Start scanning ...\n");

	count = 0;
	for (i in infiles) {
		debug("Scanning file " infiles[i] "\n");
		if (not_empty(infiles[i])) {
			verbose("Scanning file " infiles[i] "\n");

			while ((getline string < infiles[i]) > 0) {
				string = strcleanspc(string);

				if (match(string, /^config .*$/) != 0) {
					sub("config ", "", string);
					count++;
					printf("%s\n", string) > outfile;
				}
			}

			close(infiles[i]);
		} else {
			verbose("Skipping empty file " infiles[i] "\n");
		}
	}

	verbose("Scan completed without errors\n");

	debug("Output file is: " outfile "\n");

	if (count) {
		close(outfile);
	}

	exit(0);
}

END {
	lib_fini();
}
