#
# Copyright (C) 2008 Francesco Salvestrini
#                    Alessandro Massignan <ff0000.it@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

BEGIN {
	PROGNAME = "getdefine";
	
	lib_init();

	symbol   = "";
	value    = "";
	infn     = "/dev/stdin";
	outfn    = "/dev/stdout";

	opts   = "s:i:o:vVdDh";
	h_desc = "Retrieve a symbol value";
	h_note = "";

	opt_desc["s"] = "specify the symbol to look for";
	opt_desc["i"] = "set the input file";
	opt_desc["o"] = "set the output file";
	opt_desc["v"] = "enable verbose output";
	opt_desc["V"] = "disable verbose output";
	opt_desc["d"] = "enable debugging";
	opt_desc["D"] = "disable debugging";
	opt_desc["h"] = "display this help and exit";

	while ((c = getopt(ARGC, ARGV, opts)) != -1) {
		if (c == "s") {
			symbol = optarg;
		} else if (c == "i") {
			infn = optarg;
		} else if (c == "o") {
			outfn = optarg;
		} else if (c == "v") {
			_verbose = 1;
		} else if (c == "V") {
			_verbose = 0;
		} else if (c == "d") {
			_debug = 1;
		} else if (c == "D") {
			_debug = 0;
		} else if (c == "h") {
			help(0, h_desc, h_note, opts, opt_desc);
			exit(0);
		} else if (c == ":") {
			hint("");
			exit(1);
		} else if (c == "?") {
			hint("");
			exit(1);
		} else {
			not_reachable();
		}
	}

	if (symbol == "") {
		hint("Missing symbol");
		exit(1);
	}
	debug("symbol = " symbol "\n");

	if (infn == "") {
		hint("Missing input file name");
		exit(1);
	}
	if (!readable(infn)) {
		error(infn " is not readable!\n");
		exit(1);
	}
	debug("infile = " infn "\n");

	value = "";
	while ((getline string <  infn) > 0) {
		debug("String is: " string "\n");
		string = strcleanspc(string);

		if (match(string, 
			  /^#[ ]*define [a-zA-Z_][0-9a-zA-Z_]* .*$/) != 0) {
			      
			sub(/^#[ ]*define /, "", string);
			split(string, line, " ");

			if (line[1] ~ symbol) {
				assert(value == "");
				value = line[2];
				
				verbose("Got " value " for " symbol "\n");
			}
		} else {
		}
	}
	close(infn);

	if (value == "") {
		warning("No value found for " symbol " in " infn "\n");
		exit(1);
	}

	printf("%s\n", value) > outfn;
	close(outfn);

	exit(0);
}

END {
	lib_fini();
}
